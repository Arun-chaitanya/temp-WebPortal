name: WebPortal CI

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main" ]

jobs:
  docker-in-linux-tests:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Make docker command available
      uses: docker/setup-buildx-action@v3
    - name: Build the Dockerfile
      run: docker build -f Dockerfile.dev -t test-image .
    - name: Run the tests
      run: docker run test-image npm run test

  push-and-deploy:
    needs: docker-in-linux-tests
    if: github.event.pull_request.head.ref == 'refs/heads/main' || github.event.pull_request.head.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    environment: ${{ (github.event.pull_request.head.ref == 'refs/heads/main' && 'dev') || (github.event.pull_request.head.ref == 'refs/heads/master' && 'prod') }}
    steps:
      - name: Set environment variables
        id: set-vars
        run: |
          if [ "${{ github.event.pull_request.head.ref }}" == "refs/heads/main" ]; then
            echo "ECR_REPOSITORY=web-portal" >> $GITHUB_ENV
            echo "TASK_DEF_NAME=web-portal-td" >> $GITHUB_ENV
            echo "SERVICE_NAME=web-portal-dev" >> $GITHUB_ENV
            echo "CLUSTER_NAME=carecove-dev" >> $GITHUB_ENV
          else
            echo "ECR_REPOSITORY=web" >> $GITHUB_ENV
            echo "TASK_DEF_NAME=web" >> $GITHUB_ENV
            echo "SERVICE_NAME=web" >> $GITHUB_ENV
            echo "CLUSTER_NAME=carecove-prod" >> $GITHUB_ENV
          fi

      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition $TASK_DEF_NAME --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: node
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: $SERVICE_NAME
          cluster: $CLUSTER_NAME
          wait-for-service-stability: true
